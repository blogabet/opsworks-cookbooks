global
  #log /dev/log  local0
  log /dev/log  local0 err
  chroot /var/lib/haproxy
  stats timeout 30s
  user haproxy
  group haproxy
  daemon
  stats socket /run/haproxy/admin.sock mode 660 level admin

  maxconn <%= node[:haproxy][:global_max_connections] %>

  # Default SSL material locations
  ca-base /etc/haproxy/ssl/certs
  crt-base /etc/haproxy/ssl/private

  # Default ciphers to use on SSL-enabled listening sockets.
  # For more information, see ciphers(1SSL). This list is from:
  #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS
  ssl-default-bind-options no-sslv3

  # default is 1024, max is the RSA key size
  tune.ssl.default-dh-param 2048


defaults
  log     global
  mode    http
  option  httplog
  option  dontlognull
  retries <%= node[:haproxy][:retries] %>
  option  redispatch
  maxconn <%= node[:haproxy][:default_max_connections] %>
  timeout client <%= node[:haproxy][:client_timeout] %>             # Client and server timeout must match the longest
  timeout server <%= node[:haproxy][:server_timeout] %>             # time we may wait for a response from the server.
  timeout queue  <%= node[:haproxy][:queue_timeout] %>              # Don't queue requests too long if saturated.
  timeout connect <%= node[:haproxy][:connect_timeout] %>           # There's no reason to change this one.
  timeout http-request <%= node[:haproxy][:http_request_timeout] %>	# A complete request may never take that long.
  <% if node[:haproxy][:httpclose] %>
  option          httpclose                                         # disable keepalive (HAProxy does not yet support the HTTP keep-alive mode)
  <% end %>
  <% if node[:haproxy][:http_server_close] %>
  option          http-server-close                                 # enable HTTP connection closing on the server side
  <% end %>
  <% if node[:haproxy][:forceclose] %>
  option          forceclose                                        # actively close outgoing server channel after server finishes 
  <% end %>
  option          abortonclose                                      # enable early dropping of aborted requests from pending queue
  option          httpchk                                           # enable HTTP protocol to check on servers health
  <% if node[:haproxy][:enable_stats] -%>
  stats auth <%= node[:haproxy][:stats_user] %>:<%= node[:haproxy][:stats_password] %>
  stats uri <%= node[:haproxy][:stats_url] %>
  <% end -%>


<% if !node[:haproxy][:php_backends].empty? -%>  
backend php_app_servers
  balance <%= node[:haproxy][:balance] %>
  option forwardfor
  option httpchk <%= node[:haproxy][:health_check_method] %> <%= node[:haproxy][:health_check_url] %>
  <% node[:haproxy][:php_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_php_app] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>  
<% end -%>


# HTTP frontend is only for redirect to HTTPS
frontend http-in
  mode http
  bind :80

  <% if node[:haproxy][:ssl_redirect_http] -%>
  redirect scheme https if !{ ssl_fc }
  <% else -%>
    # all domains of PHP applications
    <% node[:haproxy][:php_applications].each do |app_name, app_config| -%>
      <% app_config['domains'].each do |domain| -%>
  acl php_applications hdr_end(host) -i <%= domain %>
      <% end -%>
    <% end -%>

    <% unless node[:haproxy][:php_applications].empty? || node[:haproxy][:php_backends].empty? -%>
  use_backend php_app_servers if php_applications
    <% end -%>
  
    <% if !node[:haproxy][:php_backends].empty? -%>
  default_backend php_app_servers
    <% end -%>
  <% end -%>


# HTTPS frontend (SSL SNI)
frontend https-in
  mode http

  # Load the default certificate first and then any found cert in the ssl/ dir
  <% if !node[:haproxy][:ssl_default_app].empty? -%>
  bind :443 ssl crt /etc/haproxy/ssl/<%= node[:haproxy][:ssl_default_app] %>.pem crt /etc/haproxy/ssl/
  <% else -%>
  bind :443 ssl crt /etc/haproxy/ssl/
  <% end -%>

  # Tell PHP it is behind a proxy serving HTTPS
  reqadd X-Forwarded-Proto:\ https

  # all domains of PHP applications
  <% node[:haproxy][:php_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl php_applications_ssl hdr_end(host) -i <%= domain %>
    <% end -%>
  <% end -%>

  <% unless node[:haproxy][:php_applications].empty? || node[:haproxy][:php_backends].empty? -%>
  use_backend php_app_servers if php_applications_ssl
  <% end -%>
  
  <% if !node[:haproxy][:php_backends].empty? -%>
  default_backend php_app_servers
  <% end -%>

